name: assignment3
on:
  push:
    branches:
      - main  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log start time
        run: echo "$(date -Iminutes)" > log.txt
      - name: Log submitter names
        run: echo "Ron Salomon, Maya Levi" >> log.txt
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker image for books service
        uses: docker/build-push-action@v4
        with:
          context: ./books_service
          file: ./books_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/books-service:latest
      - name: Log build success
        run: echo "image successfully built" >> log.txt
        if: success()
      - name: Log build failure
        run: echo "image not able to be built" >> log.txt
        if: failure()
      - name: Pull Docker image to ensure availability
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        if: success()
      - name: Save Docker image
        run: docker save -o /tmp/books-service-image.tar ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        if: success()
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: books-service-image
          path: /tmp/books-service-image.tar
      - name: Upload updated log file
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true
  test:
    needs: build  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log
          path: .
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service-image
          path: /tmp
      - name: Load Docker image from artifact
        run: docker load --input /tmp/books-service-image.tar
      - name: Check Docker image is loaded
        run: docker image ls
      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml up -d
      - name: Check containers are running
        run: docker ps
      - name: Health check for books-service
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://localhost:5001/health; then
              echo "books-service is up!"
              echo "Container up and running" >> log.txt
              exit 0
            fi
            echo "Waiting for books-service to be available..."
            sleep 5
          done
          echo "books-service did not start in time" && echo "Container failed to run" >> log.txt && exit 1
      - name: Get books-service container ID
        id: books_service
        run: echo "::set-output name=id::$(docker ps -qf "name=books-service-ci-cd_books-service")"
      - name: Get books-service container logs
        if: failure()
        run: docker logs ${{ steps.books_service.outputs.id }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
      - name: List books_service directory
        run: ls -R books_service
      - name: Run pytest
        run: |
          pytest -v tests/assn3_tests.py > assn3_test_results.txt || true
          if [ $? -eq 0 ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt
          fi
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt
      - name: Upload updated log file
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true
      - name: Shutdown Docker Compose
        run: docker compose -f docker-compose.yml down
  query:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download log file
        uses: actions/download-artifact@v4
        with:
          name: log
          path: .
      - name: Verify presence of query.txt
        run: |
          if [ -f books_service/query.txt ]; then
            echo "query.txt found"
            echo "Contents of query.txt:"
            cat books_service/query.txt
          else
            echo "query.txt not found"
            exit 1
          fi
      - name: Set up Docker Compose
        run: |
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml up -d
      - name: Check containers are running
        run: docker ps
      - name: Health check for books-service
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://localhost:5001/health; then
              echo "books-service is up!"
              exit 0
            fi
            echo "Waiting for books-service to be available..."
            sleep 5
          done
          echo "books-service did not start in time" && exit 1
      - name: Execute POST requests
        run: |
          url="http://localhost:5001/books"
          books=(
            '{"title": "Adventures of Huckleberry Finn", "authors": "Mark Twain", "ISBN": "9780520343641", "genre": "Fiction"}'
            '{"title": "The Best of Isaac Asimov", "authors": "Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}'
            '{"title": "Fear No Evil", "authors": "Natan Sharansky", "ISBN": "9780394558783", "genre": "Biography"}'
            '{"title": "The Adventures of Tom Sawyer", "authors": "Mark Twain", "ISBN": "9780195810400", "genre": "Fiction"}'
            '{"title": "I, Robot", "authors": "Isaac Asimov", "ISBN": "9780553294385", "genre": "Science Fiction"}'
            '{"title": "Second Foundation", "authors": "Isaac Asimov", "ISBN": "9780553293364", "genre": "Science Fiction"}'
          )
          for book in "${books[@]}"; do
            curl -X POST -H "Content-Type: application/json" -d "$book" "$url"
          done
      - name: Get books-service container ID
        id: books_service
        run: echo "::set-output name=id::$(docker ps -qf "name=books-service-ci-cd_books-service")"
      - name: Get books-service container logs
        run: docker logs ${{ steps.books_service.outputs.id }}
      - name: Perform queries
        run: |
          touch response.txt
          while IFS= read -r query; do
            echo "Processing query: $query"  # Debugging output
            response=$(curl --location -s -w "\nHTTP_CODE:%{http_code}" "http://localhost:5001/books$query" -v)
            body=$(echo "$response" | sed '$d')
            code=$(echo "$response" | tail -n1 | cut -d':' -f2)
            echo "query: $query" >> response.txt
            echo "HTTP response code: $code"  # Debugging output
            if [ "$code" -eq 200 ]; then
              echo "response: $body" >> response.txt
            else
              echo "response: error $code" >> response.txt
            fi
          done < books_service/query.txt
          echo "Contents of response file:"
          cat response.txt
        shell: bash
      - name: Set DATE environment variable
        run: echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
      - name: DockerHub login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        if: success()
      - name: Pull Docker image to ensure availability
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        if: success()
      - name: Tag and push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/books-service:latest ${{ secrets.DOCKER_USERNAME }}/books-service:${{ env.DATE }}
          docker push ${{ secrets.DOCKER_USERNAME }}/books-service:${{ env.DATE }}
        if: success()
      - name: Upload final log file
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt
          overwrite: true
      - name: Upload response file
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt