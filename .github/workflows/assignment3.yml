name: assignment3  # Workflow name

on:
  push:
    branches:
      - main  # Trigger workflow on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Specify the runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log start time
        run: echo "$(date -Iminutes)" > log.txt

      - name: Log submitter names
        run: echo "Ron Salomon, Maya Levi" >> log.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image for books service
        uses: docker/build-push-action@v4
        with:
          context: ./books_service
          file: ./books_service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/books-service:latest

      - name: Log build success
        run: echo "image successfully built" >> log.txt
        if: success()

      - name: Log build failure
        run: echo "image not able to be built" >> log.txt
        if: failure()

      - name: Pull Docker image to ensure availability
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        if: success()

      - name: Save Docker image
        run: docker save -o /tmp/books-service-image.tar ${{ secrets.DOCKER_USERNAME }}/books-service:latest
        if: success()

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: books-service-image
          path: /tmp/books-service-image.tar

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

  test:
    needs: build  # Run test job after build job
    runs-on: ubuntu-latest  # Specify the runner

    services:
      mongo:
        image: mongo:4.4  # Use MongoDB service
        ports:
          - 27017:27017  # Map MongoDB port

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service-image
          path: /tmp

      - name: Load Docker image from artifact
        run: docker load --input /tmp/books-service-image.tar

      - name: Check Docker image is loaded
        run: docker image ls

      - name: Run Docker image in container
        run: docker run -d --name books-service -p 5001:5001 ${{ secrets.DOCKER_USERNAME }}/books-service:latest

      - name: Check container is running
        run: docker ps

      # Part 2: Set up Python and pytest environment
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests

      # Part 3: Run pytest and upload the results
      - name: Run pytest
        run: |
          pytest -v books_service/tests/assn3_tests.py > assn3_test_results.txt
          if [ $? -eq 0 ]; then
            echo "tests succeeded" >> log.txt
          else
            echo "tests failed" >> log.txt

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: assn3_test_results.txt

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: log
          path: log.txt

      # Part 4: Push tagged images to DockerHub if tests succeed
      - name: Set DATE environment variable
        run: echo "DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: DockerHub login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        if: success()

      - name: Tag and push Docker image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/books-service:latest ${{ secrets.DOCKER_USERNAME }}/books-service:${{ env.DATE }}
          docker push ${{ secrets.DOCKER_USERNAME }}/books-service:${{ env.DATE }}
        if: success()

  query:
    needs: test  # Run query job after test job
    runs-on: ubuntu-latest  # Specify the runner

    services:
      mongo:
        image: mongo:4.4  # Use MongoDB service
        ports:
          - 27017:27017  # Map MongoDB port

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: books-service-image
          path: /tmp

      - name: Load Docker image from artifact
        run: docker load --input /tmp/books-service-image.tar

      - name: Check Docker image is loaded
        run: docker image ls

      - name: Run Docker image in container
        run: docker run -d --name books-service -p 5001:5001 --network="host" ${{ secrets.DOCKER_USERNAME }}/books-service:latest

      - name: Check container is running
        run: docker ps

      # Part 2: Execute initial POST requests
      - name: Execute POST requests
        run: |
          url="http://localhost:5001/books"
          books=(
            '{"title": "Adventures of Huckleberry Finn", "authors": "Mark Twain", "ISBN": "9780520343641", "genre": "Fiction"}'
            '{"title": "The Best of Isaac Asimov", "authors": "Isaac Asimov", "ISBN": "9780385050784", "genre": "Science Fiction"}'
            '{"title": "Fear No Evil", "authors": "Natan Sharansky", "ISBN": "9780394558783", "genre": "Biography"}'
            '{"title": "Book Six", "authors": "Author Six", "ISBN": "9781234567896", "genre": "Fiction"}'
            '{"title": "Book Seven", "authors": "Author Seven", "ISBN": "9781234567897", "genre": "Science Fiction"}'
            '{"title": "Book Eight", "authors": "Author Eight", "ISBN": "9781234567898", "genre": "Biography"}'
          )
          for book in "${books[@]}"; do
            curl -X POST -H "Content-Type: application/json" -d "$book" "$url"
          done

      # Part 3: Set up Python environment (if needed for further steps)
      - name: Checkout code
        uses: actions/checkout@v4

      # Part 4: Perform queries
      - name: Perform queries
        run: |
          if [ ! -f query.txt ]; then
            echo "query.txt file not found!" && exit 1
          fi
          RESPONSE_FILE="response.txt"
          echo "query results" > $RESPONSE_FILE
          while read query; do
            response=$(curl -s -w "\n%{http_code}" "http://localhost:5001/books$query")
            http_code=$(echo "$response" | tail -n1)
            if [ "$http_code" -eq 200 ]; then
              json=$(echo "$response" | head -n -1)
              echo -e "query: $query\nresponse: $json" >> $RESPONSE_FILE
            else
              echo -e "query: $query\nresponse: error $http_code" >> $RESPONSE_FILE
            fi
          done < query.txt

      # Part 5: Upload response file
      - name: Upload response file
        uses: actions/upload-artifact@v4
        with:
          name: response
          path: response.txt
